"import pandas as pd
from sklearn.tree import DecisionTreeClassifier

df = pd.read_csv('/datasets/train_data.csv')

df.loc[df['last_price'] > 5650000, 'price_class'] = 1
df.loc[df['last_price'] <= 5650000, 'price_class'] = 0

features = df.drop(['last_price', 'price_class'], axis=1)
target = df['price_class']

model = DecisionTreeClassifier()

model.fit(features, target)

new_features = pd.DataFrame(
    [[None, None, 2.8, 25, None, 25, 0, 0, 0, None, 0, 30706.0, 7877.0],
     [None, None, 2.75, 25, None, 25, 0, 0, 0, None, 0, 36421.0, 9176.0]],
    columns=features.columns)

# дозаполните таблицу с новыми признаками
new_features.loc[0, 'total_area'] = 900.0
new_features.loc[0, 'rooms'] = 12
new_features.loc[0, 'living_area'] = 409.7
new_features.loc[0, 'kitchen_area'] = 112.0
new_features.loc[1, 'total_area'] = 109.0
new_features.loc[1, 'rooms'] = 2
new_features.loc[1, 'living_area'] = 32.0
new_features.loc[1, 'kitchen_area'] = 40.5

# предскажите ответы и напечатайте результат на экране
answers = model.predict(new_features)
print(answers)"

======================================================

"import pandas as pd
from sklearn.tree import DecisionTreeClassifier

# обучающая выборка находится в файле train_data.csv
df = pd.read_csv('/datasets/train_data.csv')

df.loc[df['last_price'] > 5650000, 'price_class'] = 1
df.loc[df['last_price'] <= 5650000, 'price_class'] = 0

features = df.drop(['last_price', 'price_class'], axis=1)
target = df['price_class']

model = DecisionTreeClassifier(random_state=12345)

model.fit(features, target)

#тестовая выборка
test_df = pd.read_csv('/datasets/test_data.csv', nrows=3)

test_df.loc[test_df['last_price'] > 5650000, 'price_class'] = 1
test_df.loc[test_df['last_price'] <= 5650000, 'price_class'] = 0

test_features = test_df.drop(['last_price', 'price_class'], axis=1)
test_target = test_df['price_class']

test_predictions = model.predict(test_features)
print('Предсказания:',test_predictions)
print('Правильные ответы:',test_target.values)"
==========================================================

"import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('/datasets/train_data.csv')

df.loc[df['last_price'] > 5650000, 'price_class'] = 1
df.loc[df['last_price'] <= 5650000, 'price_class'] = 0

features = df.drop(['last_price', 'price_class'], axis=1)
target = df['price_class']

best_model = None
best_result = 0
for depth in range(1, 6):
        model = DecisionTreeClassifier(random_state=12345, max_depth=depth) # обучите модель с заданной глубиной дерева
        model.fit(features, target) # обучите модель
        predictions = model.predict(features) # получите предсказания модели
        result = accuracy_score(target, predictions) # посчитайте качество модели
        if result > best_result:
                best_model = model
                best_result = result
        
print(""Accuracy лучшей модели:"", best_result)"
===============================================

"import pandas as pd
from sklearn.model_selection import train_test_split 

df = pd.read_csv('/datasets/train_data.csv')
df.loc[df['last_price'] > 5650000, 'price_class'] = 1
df.loc[df['last_price'] <= 5650000, 'price_class'] = 0

df_train, df_valid = train_test_split(df, test_size=0.25, random_state=12345)

# < создайте переменные для признаков и целевого признака >
features_train = df_train.drop(['last_price', 'price_class'], axis=1)
target_train = df_train['price_class']
features_valid = df_valid.drop(['last_price', 'price_class'], axis=1)
target_valid = df_valid['price_class']

print(features_train.shape)
print(target_train.shape)
print(features_valid.shape)
print(target_valid.shape)"
===========================================
"for depth in range(1, 6):
    model = DecisionTreeClassifier(random_state=12345, max_depth=depth) 
    model.fit(features_train, target_train) # обучите модель на тестовой выборке
    predictions_train = model.predict(features_train) # Тестовая выборка
    predictions_valid = model.predict(features_valid) #валидационная выборка
    print(""max_depth ="", depth, "": "", end='')
    print(accuracy_score(target_valid, predictions_valid))"
	
===============================================

"import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df = pd.read_csv('/datasets/train_data.csv')
df.loc[df['last_price'] > 5650000, 'price_class'] = 1
df.loc[df['last_price'] <= 5650000, 'price_class'] = 0

df_train, df_valid = train_test_split(df, test_size=0.25, random_state=12345) # отделите 25% данных для валидационной выборки

#тренировочная выборка
features_train = df_train.drop(['last_price', 'price_class'], axis=1)
target_train = df_train['price_class']

#валидационная выборка
features_valid = df_valid.drop(['last_price', 'price_class'], axis=1)
target_valid = df_valid['price_class']

best_model = None
best_result = 0

for est in range(1, 11):
    model = RandomForestClassifier(random_state=12345, n_estimators=est) # обучите модель с заданным количеством деревьев
    model.fit(features_train, target_train) # обучите модель на тренировочной выборке
    predictions_valid = model.predict(features_valid)
    result = model.score(features_valid, target_valid) # посчитайте качество модели на валидационной выборке
    if result > best_result:
        best_model = model # сохраните наилучшую модель
        best_result = result #  сохраните наилучшее значение метрики accuracy на валидационных данных

print(""Accuracy наилучшей модели на валидационной выборке:"", best_result)"